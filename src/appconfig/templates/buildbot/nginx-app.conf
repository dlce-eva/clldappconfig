# We deploy the app to its own site.
# Redirect subdomains like www.*:
server {
    server_name  *.{{ app.domain }};
    return       301 http://{{ app.domain }}$request_uri;
}
# Redirect HTTP to HTTPS:
server {
    listen 80;
    server_name  {{ app.domain }};
    return       301 https://{{ app.domain }}$request_uri;
}

server {
    server_name {{ app.domain }};
    # Enable SSL and http2
    listen 443 ssl http2 default_server;
        ssl_certificate /etc/letsencrypt/live/{{ app.domain }}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/{{ app.domain }}/privkey.pem;
    root {{ app.www_dir }};

    access_log on;

    ssl on;
    # put a one day session timeout for websockets to stay longer
    ssl_session_cache      shared:SSL:10m;
    ssl_session_timeout  1440m;
    ssl_prefer_server_ciphers   on;

    # force https
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains;";
    spdy_headers_comp 5;

    proxy_set_header HOST $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_set_header X-Forwarded-Server  $host;
    proxy_set_header X-Forwarded-Host  $host;

    # you could use / if you use domain based proxy instead of path based proxy
    location / {
        {{ auth }}
        proxy_pass http://127.0.0.1:8010/;
    }
    location /sse/ {
        # proxy buffering will prevent sse to work
        proxy_buffering off;
        proxy_pass http://127.0.0.1:8010/sse/;
    }
    # required for websocket
    location /ws {
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_pass http://127.0.0.1:8010/ws;
        # raise the proxy timeout for the websocket
        proxy_read_timeout 6000s;
    }
}